import Data.List
basic = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
lookups = [('0', 0),('1', 1),('2', 2),('3', 3),('4', 4),('5', 5),('6', 6),('7', 7),('8',8),('9', 9)]

fact :: Integer -> Integer
fact n
	| n == 0 = 1
	| otherwise = n*fact(n-1)-- `mod` 10000000000000000000000000

calc :: String -> [Int]
calc n
	| length n > 5 = prod n : calc (tail n)
	| otherwise = [prod n]

prod :: String -> Int
prod n = product [digitToInt x lookups | x <- (take 5 n)]

stringToInt :: Int -> String -> Int
stringToInt n [] = n
stringToInt n xs = stringToInt (n*10 + (digitToInt (head xs) lookups)) (tail xs)

combination = [a:b:c:d:e:f:g:h:i:[j] | a <- [0..9], b <- [0..9], c <- [0..9], d <- [0..9], e <- [0..9], f <- [0..9], g <- [0..9], h <- [0..9], i <- [0..9], j <- [0..9], isUn (a:b:c:d:e:f:g:h:i:[j])]
isUn xs = length(nub xs) == length(xs)
--sillyAdd xs = 

digitToInt n xs
	| n == first (head xs) = second (head xs)
	| otherwise = digitToInt n (tail xs)
	
first (a,_) = a
second (_,b) = b